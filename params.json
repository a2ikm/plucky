{"name":"Plucky","body":"## Install\r\n\r\n```\r\ngem install plucky\r\n```\r\n\r\n## Examples\r\n\r\n```ruby\r\nconnection = Mongo::Connection.new\r\ndb = connection.db('test')\r\ncollection = db['users']\r\ncollection.remove # clear out the collection\r\n\r\ncollection.insert({'_id' => 'chris', 'age' => 26, 'name' => 'Chris'})\r\ncollection.insert({'_id' => 'steve', 'age' => 29, 'name' => 'Steve'})\r\ncollection.insert({'_id' => 'john',  'age' => 28, 'name' => 'John'})\r\n\r\n# initialize query with collection\r\nquery = Plucky::Query.new(collection)\r\n\r\nputs 'Querying'\r\npp query.where(:name => 'John').first\r\npp query.first(:name => 'John')\r\npp query.where(:name => 'John').all\r\npp query.all(:name => 'John')\r\n\r\nputs 'Find by _id'\r\npp query.find('chris')\r\npp query.find('chris', 'steve')\r\npp query.find(['chris', 'steve'])\r\n\r\nputs 'Sort'\r\npp query.sort(:age).all\r\npp query.sort(:age.asc).all # same as above\r\npp query.sort(:age.desc).all\r\npp query.sort(:age).last # steve\r\n\r\nputs 'Counting'\r\npp query.count # 3\r\npp query.size # 3\r\npp query.count(:name => 'John')       # 1\r\npp query.where(:name => 'John').count # 1\r\npp query.where(:name => 'John').size  # 1\r\n\r\nputs 'Distinct'\r\npp query.distinct(:age) # [26, 29, 28]\r\n\r\nputs 'Select only certain fields'\r\npp query.fields(:age).find('chris')   # {\"_id\"=>\"chris\", \"age\"=>26}\r\npp query.only(:age).find('chris')     # {\"_id\"=>\"chris\", \"age\"=>26}\r\npp query.ignore(:name).find('chris')  # {\"_id\"=>\"chris\", \"age\"=>26}\r\n\r\nputs 'Pagination, yeah we got that'\r\npp query.sort(:age).paginate(:per_page => 1, :page => 2)\r\npp query.sort(:age).per_page(1).paginate(:page => 2)\r\n\r\npp query.sort(:age).limit(2).to_a           # [chris, john]\r\npp query.sort(:age).skip(1).limit(2).to_a   # [john, steve]\r\npp query.sort(:age).offset(1).limit(2).to_a # [john, steve]\r\n\r\nputs 'Using a cursor'\r\ncursor = query.find_each(:sort => :age) do |doc|\r\n  pp doc\r\nend\r\npp cursor\r\n\r\nputs 'Symbol Operators'\r\npp query.where(:age.gt => 28).count       # 1 (steve)\r\npp query.where(:age.lt => 28).count       # 1 (chris)\r\npp query.where(:age.in => [26, 28]).to_a  # [chris, john]\r\npp query.where(:age.nin => [26, 28]).to_a  # [steve]\r\n\r\nputs 'Removing'\r\nquery.remove(:name => 'John')\r\npp query.count # 2\r\nquery.where(:name => 'Chris').remove\r\npp query.count # 1\r\nquery.remove\r\npp query.count # 0\r\n```\r\n\r\n## Help\r\n\r\nhttps://groups.google.com/forum/#!forum/mongomapper\r\n\r\n## Contributing\r\n\r\n* Fork the project.\r\n* Make your feature addition or bug fix.\r\n* Add tests for it. This is important so I don't break it in a future version unintentionally.\r\n* Commit, do not mess with rakefile, version, or history. (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)\r\n* Send me a pull request. Bonus points for topic branches.\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2010 John Nunemaker. See LICENSE for details.\r\n","tagline":"Thin layer over the ruby driver that allows you to quickly grab hold of your data.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}